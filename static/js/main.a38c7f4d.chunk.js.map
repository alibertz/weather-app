{"version":3,"sources":["components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","icon","react_default","a","createElement","style","margin","color","display","width","textAlign","city","temperature","description","clouds","humidity","padding","pressure","App","state","rain","mode","getWeather","_callee","e","api_url","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","value","fetch","sent","json","console","log","_this","setState","main","temp","name","weather","undefined","all","stop","changeMode","className","this","position","paddingTop","minHeight","onSubmit","float","height","borderTopLeftRadius","borderBottomLeftRadius","boxShadow","id","border","backgroundColor","borderBottom","marginTop","fontSize","type","placeholder","cursor","borderRadius","marginLeft","borderTopRightRadius","borderBottomRightRadius","components_Weather","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a38c7f4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { blockParams } from 'handlebars';\r\n\r\nconst Weather = (props) => {\r\n    let icon = \"http://openweathermap.org/img/w/\" + props.icon + \".png\";\r\n\r\n    const weather = {\r\n        margin: '2rem 4rem',\r\n        color: '#0e3a57',\r\n        display: 'block',\r\n        width: '80%',\r\n        textAlign: 'left'\r\n    }\r\n    return (\r\n        <div style={weather}>\r\n            <h1>{props.city}</h1>\r\n            <h2>{props.temperature}</h2>\r\n            <h3>{props.description}</h3>\r\n            <h4>{props.clouds}</h4>\r\n            <h5 style={{display: 'inline'}}>{props.humidity}</h5>\r\n            <h5 style={{display: 'inline', padding: '1.5rem'}}>{props.pressure}</h5>\r\n            {/* <img src={icon} /> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Weather from './components/Weather';\nimport './App.css';\nimport { blockParams } from 'handlebars';\n\nclass App extends Component {\n  state = {\n    temperature: \"\",\n    city: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    description: \"\",\n    rain: \"\",\n    icon: \"\",\n    clouds: \"\",\n    mode: {\n      mode: 'lightMode',\n      icon: 'far fa-moon'\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.city.value;\n    let country = \"us\";\n    let api_url = \"//api.openweathermap.org/data/2.5/weather?q=\" + city  + \",us&appid=d60ba299ed75129cc5b8fbec53f1d497&units=imperial\";\n\n    let api_call = await fetch(api_url);\n    const data = await api_call.json();\n    \n    console.log(data);\n    this.setState({\n      temperature: data.main.temp + \"Â°F\",\n      city: data.name,\n      humidity: \"humidity: \" + data.main.humidity,\n      pressure: \"pressure: \" + data.main.pressure,\n      description: data.weather[0].description,\n      rain: undefined,\n      icon: data.weather[0].icon,\n      clouds: data.clouds.all + \"% cloudy\"\n    })\n  }\n  changeMode = () => {\n    if (this.state.mode.mode === \"lightMode\") {\n      this.setState({mode: {\n                      mode: 'darkMode',\n                      icon: 'far fa-sun'\n                    }})\n    } else {\n      this.setState({mode: {\n        mode: 'lightMode',\n        icon: 'far fa-moon'\n      }})\n    }\n  }\n  render () {\n    const appContainer = {\n      position: 'relative',\n      display: 'block',\n      width: '50%',\n      minHeight: '18rem',\n      margin: '3rem auto',\n    }  \n    const form = {\n      position: 'absolute',\n      float: 'left',\n      width: '50%',\n      height: '100%',\n      padding: '2rem',\n      borderTopLeftRadius: '3rem',\n      borderBottomLeftRadius: '3rem',\n      boxShadow: '0 7px 30px -10px rgba(150, 170, 180, 0.8)'\n    }\n    const weatherWrapper = {\n      backgroundColor: '#f1eea1',\n      position: 'absolute',\n      float: 'right',\n      width: '50%',\n      height: '100%',\n      marginLeft: '50%',\n      padding: '2rem',\n      borderTopRightRadius: '3rem',\n      borderBottomRightRadius: '3rem',\n      boxShadow: '0 7px 30px -10px rgba(150, 170, 180, 0.8)'\n    }\n    const input = {\n      border: 'none',\n      backgroundColor: 'Transparent',\n      borderBottom: '3px solid #0e3a57',\n      marginTop: '3rem',\n      color: 'white',\n      fontSize: '1.2rem',\n      width: '40%'\n    }\n    const btn = {\n      backgroundColor: '#0e3a57',\n      border: 'none',\n      color: 'white',\n      cursor: 'pointer',\n      borderRadius: '5px',\n      padding: '.5rem 1rem',\n      margin: '1rem',\n      boxShadow: '0 7px 20px -10px rgba(150, 170, 180, 0.8)'\n    }\n    const backBtn = {\n      fontSize: '1.5rem',\n      padding: '1rem 2.2rem',\n      backgroundColor: 'salmon',\n      display: 'inline-block',\n      position: 'relative',\n      margin: '3.2rem auto 3rem 45%',\n      borderRadius: '1rem',\n      color:'white',\n      border: 'none',\n      cursor: 'pointer'\n    }\n    const title = {\n      position:'relative',\n      display: 'block',\n      width: '50%',\n      margin: '0 auto 0 auto',\n      paddingTop: '6rem'\n    }\n    const modeBtn = {\n      height:'50px',\n      width: '50px',\n      borderRadius: '50%',\n      display:'inline',\n      float: 'right',\n      border:'none',\n      margin: '3rem 5% 3.2rem auto',\n    }\n\n    return (\n      <div className={this.state.mode.mode}>\n        <div style={title}>\n          <h1>Simple Weather App</h1>\n          <h3>Enter a U.S. city and press \"Find weather\"</h3>\n        </div>\n        \n        <div style={appContainer}>\n          <form onSubmit={this.getWeather} style={form} id=\"inputCity\">\n            <input style={input} type='text' name='city' placeholder='City...' />\n            <button type='submit' style={btn}>Find weather</button>\n          </form>\n          <div style={weatherWrapper}>\n            <Weather \n              temperature={this.state.temperature}\n              humidity={this.state.humidity}\n              pressure={this.state.pressure}\n              city={this.state.city}\n              description={this.state.description}\n              icon={this.state.icon}\n              clouds={this.state.clouds}\n            />\n          </div>\n        </div>\n        <a href=\"https://alibertz.github.io/resumesite//\"><button style={backBtn}>Back</button></a>\n        <button style={modeBtn} onClick={this.changeMode} id=\"modeBtn\"><i className={this.state.mode.icon}></i> </button>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}